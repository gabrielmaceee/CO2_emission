# Test de student groupe vs groupe 1 vs 1, avec correction :
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method="none") # sans ajustement
View(d)
View(m)
summary(m)
d = faraway::coagulation
d = faraway::coagulation
table(d$diet)
library(MASS)
data(crabs)
plot(crabs$RW)
myt.test <- function(x, y,alternative = "two.sided", paired = FALSE, var.equal = FALSE){
if(paired == TRUE){
method = "Student two sample t-test"
n = length(x)
df = n-1
Di=x-y
D = 1/n *sum(Di)
S2 = (1/(n-1)) * sum((Di-D)^2)
statistic = sqrt(n)*(D/sqrt(S2))
}
else{
method = "Welch two sample t-test"
n1 = length(x)
n2 = length(y)
statistic = (mean(x) - mean(y))/ sqrt(var(x)/n1 + var(y)/n2)
df = round((var(x)/n1 + var(y)/n2)^2 / ( ((var(x)^2)/((n1-1) * n1^2)) + ((var(y)^2)/((n2-1) * n2^2)) ))
}
if(shapiro.test(x)$p.value > 0.05 & shapiro.test(x)$p.value > 0.05){
if(alternative == "two.sided"){
p.value = 2*(1-pt(q = abs(statistic), df = df))
}
else if(alternative == "less"){
p.value = 1- pt(q = abs(statistic), df = df)
}
else{p.value = pt(q = abs(statistic), df = df)}
}
else{
if(alternative == "two.sided"){
p.value = 2*(1-pnorm(q = abs(statistic)))
}
else if(alternative == "less"){
p.value =  pnorm(q = abs(statistic))
}
else{p.value = 1-pnorm(q = abs(statistic))}
}
return(c(method, alternative, statistic, df, p.value))
}
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
x = rexp(20,2)
y = rexp(20,3)
myt.test(x,y, paired = FALSE, alternative = "two.sided")
t.test(x,y, paired = FALSE, alternative = "two.sided")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = FALSE, alternative = "less")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
factor(d$diet)
d$diet_f = as.factor(d$diet)
View(d)
m = lm(coag~diet, d)
View(m)
m1 = lm(coag~diet_f, d)
View(m1)
#d$diet_f = as.factor(d$diet)
m = lm(coag~diet_f, d)
# test normalité des résidus :
shapiro.test(m$residuals)
summary(m)
#d$diet_f = as.factor(d$diet)
m = lm(coag~diet, d)
summary(m)
# test normalité des résidus :
shapiro.test(m$residuals) # p-value = 0.8629, normal
summary(m)
d = faraway::coagulation
# coag : mue + I_diet * Beta + erreurs
# H0 : égalité des moyennes / facteurs Beta
m = lm(coag~diet, d)
# test normalité des résidus :
shapiro.test(m$residuals) # p-value = 0.8629, normal
# p-value: 4.658e-05 < 0.05, on rejette H0
summary(m)
# Test de Tuckey : Voir les différences entre les groupes graphiquement
m1 = aov(coag~diet,d)
plot(TukeyHSD(m, conf.level=0.95), las=2)
plot(TukeyHSD(m1, conf.level=0.95), las=2)
summary(m) # effet global
summary(m1) # effet global
# homogénéité de la variance
bartlett.test(coag~diet, d)
# Test de student groupe vs groupe 1 vs 1, avec correction :
pairwise.t.test(d$coag, d$diet, p.adjust.method="none") # sans ajustement
pairwise.t.test(d$coag, d$diet, p.adjust.method="bon") # Bonferroni
pairwise.t.test(d$coag, d$diet, p.adjust.method= "BH") # Benjamini-Hochberg
# Ou bien non paramétrique car petits échantillons dans chaque groupe
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="none") # sans ajustement
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="bon") # Bonferroni
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method= "BH") # Benjamini-Hochberg
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="none", exact = FALSE) # sans ajustement
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="bon", exact = FALSE) # Bonferroni
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method= "BH", exact = FALSE) # Benjamini-Hochberg
# kruskal. Wallis
kruskal.test(coag~diet,d)
# EX 2 : poumons
d = ISwR::lung
# EX 2 : poumons
d = ISwR::lung
View(d)
table(d$method)
plot(volume~method+subject, d)
table(d$method+subject)
table(d$method+d$subject)
table(method+subject,d)
table(d$method, d$subject)
plot(volume~method+subject, d)
m = kruskal.test(volume~method+subject,d)
m =lm(volume~method+subject,d)
summary(m)
# HO : homogénéité de la variance
bartlett.test(coag~diet, d)
# HO : homogénéité de la variance
bartlett.test(volume~method+subject, d)
# HO : homogénéité de la variance
bartlett.test(m, d)
# test normalité des résidus : H0 : normalité des individus
shapiro.test(m$residuals)
# HO : homogénéité de la variance
bartlett.test(volume~method, d)
bartlett.test(volume~subject, d)
m1 = aov(volume~method+subject,d)
plot(TukeyHSD(m1, conf.level=0.95), las=2)
summary(m1) # effet global
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
setwd("D:/Master/S7/R-Julia/Projet")
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
shapiro.test(emission$Consommation.ville)
View(emission)
# rendre les variables quali nominales sur R:
emission$Make<-factor(emission$Make)
emission$Model<-factor(emission$Model)
emission$Transmission<-factor(emission$Transmission)
emission$Fuel.Type<-factor(emission$Fuel.Type)
emission$Vehicle.Class<-factor(emission$Vehicle.Class)
# renommer les variables :
names(emission)[names(emission)=="Engine.Size.L."]<-"Engine.Size"
names(emission)[names(emission)=="Fuel.Consumption.City..L.100.km."]<-"Consommation.ville"
names(emission)[names(emission)=="Fuel.Consumption.Hwy..L.100.km."]<-"Consommation.autoroute"
names(emission)[names(emission)=="Fuel.Consumption.Comb..L.100.km."]<-"Consommation.mixte"
names(emission)[names(emission)=="Fuel.Consumption.Comb..mpg."]<-"Consommation.mixte.mpg"
names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
names(emission)
#variables quanti continues :
emission$Engine.Size<-as.double(emission$Engine.Size)
emission$Consommation.autoroute<-as.double(emission$Consommation.autoroute)
emission$Consommation.ville<-as.double(emission$Consommation.ville)
emission$Consommation.mixte<-as.double(emission$Consommation.mixte)
emission$Consommation.mixte.mpg<-as.double(emission$Consommation.mixte.mpg)
emission$CO2_emissions<-as.double(emission$CO2_emissions)
# variable quanti discrète :
emission$Cylinders<-as.integer(emission$Cylinders)
length(unique(emission$Cylinders))
shapiro.test(emission$Consommation.ville)
emission$Consommation.ville
shapiro.test(emission$Consommation.ville)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#4.20   10.10   12.10   12.56   14.60   30.60
hist(emission$Consommation.ville)
# ~~loi normale, de moyenne 12.56, et de var 12.25
var(emission$Consommation.ville)
shapiro.test(emission$Consommation.ville)
length(emission$Consommation.ville)
chisq.test(emission$Consommation.ville, emission$CO2_emissions)
chisq.test(emission$Consommation.mixte, emission$CO2_emissions)
lm(CO2_emissions~Fuel.Type,emission)
summary(lm(CO2_emissions~Fuel.Type,emission))
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c(emission$Make, emission$Model, emission$Transmission, emission$Fuel.Type, emission$Vehicle.Class)
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c(emission$Engine.Size, emission$Consommation.ville, emission$Consommation.autoroute, emission$Consommation.mixte, emission$Consommation.mixte.mpg, emission$CO2_emissions)
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c("Make", "Model", "Transmission", "Fuel.Type", "Vehicle.Class")
for(i in nominales){
print(summary(lm(CO2_emissions~i)))
}
for(i in nominales){
print(summary(lm(CO2_emissions~i,emission)))
}
for(i in nominales){
print(i)
print(summary(lm(CO2_emissions~i,emission)))
}
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c(Make, Model, Transmission, Fuel.Type, Vehicle.Class)
for(i in nominales){
print(i)
print(summary(lm(emission$CO2_emissions~emission[,i])))
}
l=c()
for(i in nominales){
l  =  c(l,summary(lm(emission$CO2_emissions~emission[,i]))$p.value)
}
l
summary(lm(emission$CO2_emissions~emission[,i]))$p.value
summary(lm(emission$CO2_emissions~emission[,i]))
summary(lm(emission$CO2_emissions~emission[,i]))$p-value
summary(lm(emission$CO2_emissions~emission[,i]))[1]
summary(lm(emission$CO2_emissions~emission[,i]))[2]
summary(lm(emission$CO2_emissions~emission[,i]))[3]
summary(lm(emission$CO2_emissions~emission[,i]))[4]
summary(lm(emission$CO2_emissions~emission[,i]))[5]
summary(lm(emission$CO2_emissions~emission[,i]))[6]
summary(lm(emission$CO2_emissions~emission[,i]))[7]
summary(lm(emission$CO2_emissions~emission[,i]))[8]
summary(lm(emission$CO2_emissions~emission[,i]))[9]
summary(lm(emission$CO2_emissions~emission[,i]))[10]
summary(lm(emission$CO2_emissions~emission[,i]))[11]
summary(lm(emission$CO2_emissions~emission[,i]))[12]
summary(lm(emission$CO2_emissions~emission[,i]))[13]
summary(lm(emission$CO2_emissions~emission[,i]))[14]
summary(lm(emission$CO2_emissions~emission[,i]))[p.value]
summary(lm(emission$CO2_emissions~emission[,i]))
summary(lm(emission$CO2_emissions~emission[,i]))[1]
summary(lm(emission$CO2_emissions~emission[,i]))[2]
summary(lm(emission$CO2_emissions~emission[,i]))[3]
summary(lm(emission$CO2_emissions~emission[,i]))[4]
summary(lm(emission$CO2_emissions~emission[,i]))[5]
summary(lm(emission$CO2_emissions~emission[,i]))[5]
summary(lm(emission$CO2_emissions~emission[,i]))[6]
summary(lm(emission$CO2_emissions~emission[,i]))[7]
summary(lm(emission$CO2_emissions~emission[,i]))[8]
summary(lm(emission$CO2_emissions~emission[,i]))[9]
summary(lm(emission$CO2_emissions~emission[,i]))[10]
summary(lm(emission$CO2_emissions~emission[,i]))[11]
summary(lm(emission$CO2_emissions~emission[,i]))[12]
summary(lm(emission$CO2_emissions~emission[,i]))
lm(emission$CO2_emissions~emission[,i])$p.value
m = lm(emission$CO2_emissions~emission[,i])
View(m)
for(i in continues){
l = c(l,i,chisq.test(emission[,i], emission$CO2_emissions))
}
l=c()
for(i in nominales){
l = c(l, i, summary(lm(emission$CO2_emissions~emission[,i]))$coefficients[2,4])
}
l
chisq.test(emission[,continues [1]], emission$CO2_emissions)$p.value
chisq.test(emission[,continues [1]], emission$CO2_emissions)
chisq.test(emission[,continues [1]], emission$CO2_emissions)$p.value
m = chisq.test(emission[,continues [1]], emission$CO2_emissions)
for(i in continues){
l = c(l,i,chisq.test(emission[,i], emission$CO2_emissions)$p.value)
}
l
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg", )
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg")
for(i in continues){
l = c(l,i,chisq.test(emission[,i], emission$CO2_emissions)$p.value)
}
l=c()
for(i in continues){
l = c(l,i,chisq.test(emission[,i], emission$CO2_emissions)$p.value)
}
l
for(i in nominales){
l = c(l, i, summary(lm(emission$CO2_emissions~emission[,i]))$coefficients[2,4])
}
l
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#96.0   208.0   246.0   250.6   288.0   522.0
hist(emission$CO2_emissions)
library(shiny); source('Package_R/partie_R.R')
library(shiny)
runApp("App")
setwd("D:/Master/S7/R-Julia/Projet/Package_R")
runApp("App")
runApp("App")
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
carburant(emission$Fuel.Type[1])
for(i in 1:7385){
emission$Fuel.Type[i] = carburant(emission$Fuel.Type[i])
}
emission$Fuel.Type[i]*
m
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c("Make", "Model", "Transmission", "Fuel.Type", "Vehicle.Class")
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg")
emission$Fuel.Type[i]
carburant(emission$Fuel.Type[i])
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
runApp("App")
setwd("D:/Master/S7/R-Julia/Projet/Package_R")
runApp("App")
setwd("D:/Master/S7/R-Julia/Projet")
runApp("App")
colors <- c("red","green","red","red","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
legend("topleft",legend = c("Autre","E"), pch=19,col = colors)
factor(emission$Fuel.Type)
emission$Fuel.Type<-factor(emission$Fuel.Type)
colors <- c("red","green","red","red","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
factor(emission$Fuel.Type)
View(emission)
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c("Make", "Model", "Transmission", "Fuel.Type", "Vehicle.Class")
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg")
# variables quantitatives discrètes :  Cylinders
length(unique(emission$Engine.Size.L.)) # on le mets en continue
# rendre les variables quali nominales sur R:
emission$Make<-factor(emission$Make)
emission$Model<-factor(emission$Model)
emission$Transmission<-factor(emission$Transmission)
emission$Fuel.Type<-factor(emission$Fuel.Type)
emission$Vehicle.Class<-factor(emission$Vehicle.Class)
# renommer les variables :
names(emission)[names(emission)=="Engine.Size.L."]<-"Engine.Size"
names(emission)[names(emission)=="Fuel.Consumption.City..L.100.km."]<-"Consommation.ville"
names(emission)[names(emission)=="Fuel.Consumption.Hwy..L.100.km."]<-"Consommation.autoroute"
names(emission)[names(emission)=="Fuel.Consumption.Comb..L.100.km."]<-"Consommation.mixte"
names(emission)[names(emission)=="Fuel.Consumption.Comb..mpg."]<-"Consommation.mixte.mpg"
names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
names(emission)
#variables quanti continues :
emission$Engine.Size<-as.double(emission$Engine.Size)
emission$Consommation.autoroute<-as.double(emission$Consommation.autoroute)
emission$Consommation.ville<-as.double(emission$Consommation.ville)
emission$Consommation.mixte<-as.double(emission$Consommation.mixte)
emission$Consommation.mixte.mpg<-as.double(emission$Consommation.mixte.mpg)
emission$CO2_emissions<-as.double(emission$CO2_emissions)
# variable quanti discrète :
emission$Cylinders<-as.integer(emission$Cylinders)
length(unique(emission$Cylinders))
# renommer les types de carburants :
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
colors <- c("red","green","red","red","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
legend("topleft",legend = c("Autre","E"), pch=19,col = colors)
factor(emission$Fuel.Type)
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
View(emission)
summary(emission)
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c("Make", "Model", "Transmission", "Fuel.Type", "Vehicle.Class")
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg")
# variables quantitatives discrètes :  Cylinders
length(unique(emission$Engine.Size.L.)) # on le mets en continue
# rendre les variables quali nominales sur R:
emission$Make<-factor(emission$Make)
emission$Model<-factor(emission$Model)
emission$Transmission<-factor(emission$Transmission)
emission$Fuel.Type<-factor(emission$Fuel.Type)
emission$Vehicle.Class<-factor(emission$Vehicle.Class)
# renommer les variables :
names(emission)[names(emission)=="Engine.Size.L."]<-"Engine.Size"
names(emission)[names(emission)=="Fuel.Consumption.City..L.100.km."]<-"Consommation.ville"
names(emission)[names(emission)=="Fuel.Consumption.Hwy..L.100.km."]<-"Consommation.autoroute"
names(emission)[names(emission)=="Fuel.Consumption.Comb..L.100.km."]<-"Consommation.mixte"
names(emission)[names(emission)=="Fuel.Consumption.Comb..mpg."]<-"Consommation.mixte.mpg"
names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
names(emission)
#variables quanti continues :
emission$Engine.Size<-as.double(emission$Engine.Size)
emission$Consommation.autoroute<-as.double(emission$Consommation.autoroute)
emission$Consommation.ville<-as.double(emission$Consommation.ville)
emission$Consommation.mixte<-as.double(emission$Consommation.mixte)
emission$Consommation.mixte.mpg<-as.double(emission$Consommation.mixte.mpg)
emission$CO2_emissions<-as.double(emission$CO2_emissions)
# variable quanti discrète :
emission$Cylinders<-as.integer(emission$Cylinders)
length(unique(emission$Cylinders))
# renommer les types de carburants :
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
colors <- c("red","green","red","red","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
legend("topleft",legend = c("Autre","E"), pch=19,col = colors)
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
View(emission)
summary(emission)
# renommer les types de carburants :
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
# variables qualitatives nominales : Make, model, Transmission, Fuel type, vehicle.class
nominales <- c("Make", "Model", "Transmission", "Fuel.Type", "Vehicle.Class")
# variables qualitatives ordinales :
# variables quantitatives continues : engine.size, Fuels consuption *4, C02 emission, on peut enlever mpg
continues <- c("Engine.Size", "Consommation.ville", "Consommation.autoroute", "Consommation.mixte", "Consommation.mixte.mpg")
# variables quantitatives discrètes :  Cylinders
length(unique(emission$Engine.Size.L.)) # on le mets en continue
# rendre les variables quali nominales sur R:
emission$Make<-factor(emission$Make)
emission$Model<-factor(emission$Model)
emission$Transmission<-factor(emission$Transmission)
emission$Fuel.Type<-factor(emission$Fuel.Type)
emission$Vehicle.Class<-factor(emission$Vehicle.Class)
# renommer les variables :
names(emission)[names(emission)=="Engine.Size.L."]<-"Engine.Size"
names(emission)[names(emission)=="Fuel.Consumption.City..L.100.km."]<-"Consommation.ville"
names(emission)[names(emission)=="Fuel.Consumption.Hwy..L.100.km."]<-"Consommation.autoroute"
names(emission)[names(emission)=="Fuel.Consumption.Comb..L.100.km."]<-"Consommation.mixte"
names(emission)[names(emission)=="Fuel.Consumption.Comb..mpg."]<-"Consommation.mixte.mpg"
names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
names(emission)
#variables quanti continues :
emission$Engine.Size<-as.double(emission$Engine.Size)
emission$Consommation.autoroute<-as.double(emission$Consommation.autoroute)
emission$Consommation.ville<-as.double(emission$Consommation.ville)
emission$Consommation.mixte<-as.double(emission$Consommation.mixte)
emission$Consommation.mixte.mpg<-as.double(emission$Consommation.mixte.mpg)
emission$CO2_emissions<-as.double(emission$CO2_emissions)
# variable quanti discrète :
emission$Cylinders<-as.integer(emission$Cylinders)
length(unique(emission$Cylinders))
### Description univariée :
# Quali nominales :
summary(emission$Make)
colors <- c("red","green","red","red","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
factor(emission$Fuel.Type)
colors <- c("red","red","red","green","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le carburant")
legend("topleft",legend = c("Autre","E"), pch=19,col = colors)
### Il y a un groupe éthanol ,et un groupe avec le reste
colors <- c("orange","black","blue", "green","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO 2en connaissant le type de carburant")
legend("topleft",legend = levels(factor(emission$Fuel.Type)), pch=19,col = colors)
legend("topleft",legend = levels(factor(emission$Fuel.Type)), pch=19,col = colors, cex = 0.5)
### Il y a un groupe éthanol ,et un groupe avec le reste
colors <- c("orange","black","blue", "green","red")
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO 2en connaissant le type de carburant")
legend("topleft",legend = levels(factor(emission$Fuel.Type)), pch=19,col = colors, cex = 0.5)
plot(emission$Consommation.autoroute,emission$CO2_emissions, pch=19,col = colors[factor(emission$Fuel.Type)], main = "Emission de CO2 en connaissant le type de carburant")
legend("topleft",legend = levels(factor(emission$Fuel.Type)), pch=19,col = colors, cex = 0.75)
source('Package_R/partie_R.R')
setwd("D:/Master/S7/R-Julia/Projet/Package_R")
runApp("App")
runApp("App")
emission <-read.csv("CO2 Emissions_Canada.csv") # importation de la base de données
# renommer les types de carburants :
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#96.0   208.0   246.0   250.6   288.0   522.0
hist(emission$CO2_emissions)
