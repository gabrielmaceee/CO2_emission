plot(crabs$RW)
library(ggplot2)
ggplot(crabs, aes(x=RW)) + geom_density()+ labs(title = "Densité de la taille de l'arrière de carapace")
print(shapiro.test(crabs$RW))
ggplot(crabs, aes(x=RW, colour = sex)) + geom_density() + labs(title = "Densité de la taille de l'arrière de carapace en fonction du sexe")
print(shapiro.test(crabs[crabs$sex == "F",]$RW))
print(shapiro.test(crabs[crabs$sex == "M",]$RW))
colors <- c("blue", "red")
plot(crabs$RW, pch=19,col = colors[factor(crabs$sex)], main = "Taille de l'arrière des carapaces en connaissant le sexe")
legend("topleft",legend = levels(factor(crabs$sex)), pch=19,col = colors)
mean_value <- mean(crabs[crabs$sex == "F",]$RW)
n <- length(crabs[crabs$sex == "F",]$RW)
# Find the standard deviation
standard_deviation <- sd(crabs[crabs$sex == "F",]$RW)
# Find the standard error
standard_error <- standard_deviation / sqrt(n)
alpha = 0.05
degrees_of_freedom = n - 1
t_score = qt(p=alpha/2, df=degrees_of_freedom,lower.tail=F)
margin_error <- t_score * standard_error
# Calculating lower bound and upper bound
lower_bound <- mean_value - margin_error
upper_bound <- mean_value + margin_error
# Print the confidence interval
print(c(lower_bound,upper_bound))
mean_value <- mean(crabs[crabs$sex == "F",]$RW)
n <- length(crabs[crabs$sex == "F",]$RW)
# Find the standard deviation
standard_deviation <- sd(crabs[crabs$sex == "F",]$RW)
# Find the standard error
standard_error <- standard_deviation / sqrt(n)
alpha = 0.05
degrees_of_freedom = n - 1
t_score = qnorm(alpha/2)
margin_error <- t_score * standard_error
# Calculating lower bound and upper bound
lower_bound <- mean_value - margin_error
upper_bound <- mean_value + margin_error
# Print the confidence interval
print(c(lower_bound,upper_bound))
moyenne <- mean(crabs[crabs$sex == "F",]$RW)
n <- length(crabs[crabs$sex == "F",]$RW)
inf <- moyenne - (qnorm(alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n))
sup <- moyenne + (qnorm(alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n))
print(c(inf, sup))
moyenne <- mean(crabs[crabs$sex == "F",]$RW)
n <- length(crabs[crabs$sex == "F",]$RW)
inf <- moyenne - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n))
sup <- moyenne + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n))
print(c(inf, sup))
moyenne_f <- mean(crabs[crabs$sex == "F",]$RW)
n_f <- length(crabs[crabs$sex == "F",]$RW)
inf_f <- moyenne_f - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
sup_f <- moyenne_f + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
print(c(inf_f, sup_f))
library(MASS)
data(crabs)
head(crabs$RW)
moyenne_f <- mean(crabs[crabs$sex == "F",]$RW)
n_f <- length(crabs[crabs$sex == "F",]$RW)
inf_f <- moyenne_f - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
moyenne_f <- mean(crabs[crabs$sex == "F",]$RW)
n_f <- length(crabs[crabs$sex == "F",]$RW)
alpha = 0.05
inf_f <- moyenne_f - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
sup_f <- moyenne_f + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
print(c(inf_f, sup_f))
moyenne_f <- mean(crabs[crabs$sex == "F",]$RW)
n_f <- length(crabs[crabs$sex == "F",]$RW)
alpha = 0.05
inf_f <- moyenne_f - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
sup_f <- moyenne_f + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
print(c(inf_f, sup_f))
moyenne_m <- mean(crabs[crabs$sex == "M",]$RW)
n_m <- length(crabs[crabs$sex == "M",]$RW)
inf_m <- moyenne_m - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "M",]$RW) / sqrt(n_m))
sup_m <- moyenne_m + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "M",]$RW) / sqrt(n_m))
print(c(inf_f, sup_f))
moyenne_f <- mean(crabs[crabs$sex == "F",]$RW)
n_f <- length(crabs[crabs$sex == "F",]$RW)
alpha = 0.05
inf_f <- moyenne_f - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
sup_f <- moyenne_f + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "F",]$RW) / sqrt(n_f))
print(c(inf_f, sup_f))
moyenne_m <- mean(crabs[crabs$sex == "M",]$RW)
n_m <- length(crabs[crabs$sex == "M",]$RW)
inf_m <- moyenne_m - (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "M",]$RW) / sqrt(n_m))
sup_m <- moyenne_m + (qnorm(1 - alpha/2) * sd(crabs[crabs$sex == "M",]$RW) / sqrt(n_m))
print(c(inf_m, sup_m))
plot(crabs[crabs$sex == "F",]$RW)
abline(h=inf_f, col ="red")
abline(h=sup_f, col ="red")
plot(crabs[crabs$sex == "FM",]$RW)
plot(crabs[crabs$sex == "F",]$RW)
abline(h=inf_f, col ="red")
abline(h=sup_f, col ="red")
plot(crabs[crabs$sex == "M",]$RW)
abline(h=inf_m, col ="red")
abline(h=sup_m, col ="red")
lines(moyenne_f, col="orange")
colors <- c("blue", "red")
plot(crabs$RW, pch=19,col = colors[factor(crabs$sex)], main = "Taille de l'arrière des carapaces en connaissant le sexe")
legend("topleft",legend = levels(factor(crabs$sex)), pch=19,col = colors)
lines(moyenne_f, col="orange")
abline(h=inf_f, col ="red")
abline(h=sup_f, col ="red")
lines(moyenne_m, col = "blue")
abline(h=inf_m, col ="cyan")
abline(h=sup_m, col ="cyan")
ggplot(df, aes(x = c(1,2), y = c(moyenne_f, moyenne_m))) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = (inf_f, inf_m)))
ggplot(df, aes(x = c(1,2), y = c(moyenne_f, moyenne_m))) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
library(ggplot2)
ggplot(crabs, aes(x=RW)) + geom_density()+ labs(title = "Densité de la taille de l'arrière de carapace")
print(shapiro.test(crabs$RW))
ggplot(df, aes(x = c(1,2), y = c(moyenne_f, moyenne_m))) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
ggplot(crabs, aes(x = c(1,2), y = c(moyenne_f, moyenne_m))) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
ggplot(c(moyenne_f, moyenne_m), aes(x = c(1,2), y = c(moyenne_f, moyenne_m))) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = matrix(c(x,y), ncol = 2)
ggplot(df, aes(x = x, y = y)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
ggplot(df, aes(x = x, y = y)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
ggplot(df, aes(x = x, y = y, fill = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
ggplot(df, aes(x = x, y = y, fill = y)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
+ labs(title = "Intervallede confiance des moyennes de la taille de la carapace selon le sexe")
factor(y)
df$group <- factor(y)
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(y)
ggplot(df, aes(x = x, y = y, fill = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
+ labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c(1,2)
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(y)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
+ labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c("F","M")
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(y)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
+ labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c("F","M")
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m)))
+ labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c("F","M")
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m))) + labs(fill = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c("F","M")
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
x = c("F","M")
y = c(moyenne_f, moyenne_m)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon le sexe")
# paramétrique :
# H0 : égalité des moyennes selon le sexe
t.test(RW~sp, crabs, alternative = "greater")
# paramétrique :
# H0 : égalité des moyennes selon le sexe
t.test(RW~sp, crabs, alternative = "less")
# paramétrique :
# H0 : égalité des moyennes selon le sexe
t.test(RW~sexe, crabs, alternative = "less")
# paramétrique :
# H0 : égalité des moyennes selon le sexe
t.test(RW~sex, crabs, alternative = "less")
# paramétrique :
# H0 : égalité des moyennes selon le sexe
t.test(RW~sex, crabs, alternative = "greater")
# test non paramètrique de Wilcoxon
# H0 : il y a équidistribution
wilcox.test(RW~sex, crabs, alternative = "greater")
# test non paramètrique de Wilcoxon
# H0 : il y a équidistribution
wilcox.test(RW~sex, crabs)
t.test(RW~sex, crabs, alternative = "greater")
wilcox.test(RW~sex, crabs, alternative = "greater")
ggplot(crabs, aes(x=RW, colour = sp)) + geom_density() + scale_color_manual(values = c("blue", "orange"))+ labs(title = "Densité de la taille de l'arrière de carapace en fonction de l'espèce")
print(shapiro.test(crabs[crabs$sp == "B",]$RW))
# p-value = 0.588, on ne rejette pas la normalité
print(shapiro.test(crabs[crabs$sp == "O",]$RW))
#p-value = 0.8877, on ne rejette pas la normalité
colors <- c("blue", "orange")
plot(crabs$RW, pch=19,col = colors[factor(crabs$sp)], main = "Taille de l'arrière des carapaces en connaissant l'e sexe l'espèce")
legend("topleft",legend = levels(factor(crabs$sp)), pch=19,col = colors)
colors <- c("blue", "orange")
plot(crabs$RW, pch=19,col = colors[factor(crabs$sp)], main = "Taille de l'arrière des carapaces en connaissant l'espèce")
legend("topleft",legend = levels(factor(crabs$sp)), pch=19,col = colors)
moyenne_b <- mean(crabs[crabs$s == "B",]$RW)
n_b <- length(crabs[crabs$sp == "B",]$RW)
alpha = 0.05
inf_b <- moyenne_b - (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "B",]$RW) / sqrt(n_b))
sup_b <- moyenne_b + (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "B",]$RW) / sqrt(n_b))
print(c(inf_b, sup_b))
moyenne_o <- mean(crabs[crabs$sp == "O",]$RW)
n_o <- length(crabs[crabs$sp == "O",]$RW)
inf_o <- moyenne_o - (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "O",]$RW) / sqrt(n_o))
sup_o <- moyenne_o + (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "O",]$RW) / sqrt(n_o))
print(c(inf_o, sup_o))
moyenne_b <- mean(crabs[crabs$sp == "B",]$RW)
n_b <- length(crabs[crabs$sp == "B",]$RW)
alpha = 0.05
inf_b <- moyenne_b - (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "B",]$RW) / sqrt(n_b))
sup_b <- moyenne_b + (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "B",]$RW) / sqrt(n_b))
print(c(inf_b, sup_b))
moyenne_o <- mean(crabs[crabs$sp == "O",]$RW)
n_o <- length(crabs[crabs$sp == "O",]$RW)
inf_o <- moyenne_o - (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "O",]$RW) / sqrt(n_o))
sup_o <- moyenne_o + (qnorm(1 - alpha/2) * sd(crabs[crabs$sp == "O",]$RW) / sqrt(n_o))
print(c(inf_o, sup_o))
x = c("B","O")
y = c(moyenne_b, moyenne_o)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon l'e sexe'espèce")
x = c("B","O")
y = c(moyenne_b, moyenne_o)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
scale_color_manual(values = c("blue", "orange")) +
geom_errorbar(aes(ymax = c(sup_f, sup_m), ymin = c(inf_f, inf_m))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon l'e sexe'espèce")
x = c("B","O")
y = c(moyenne_b, moyenne_o)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
scale_color_manual(values = c("blue", "orange")) +
geom_errorbar(aes(ymax = c(sup_b, sup_o), ymin = c(inf_b, inf_o))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon l'e sexe'espèce")
x = c("B","O")
y = c(moyenne_b, moyenne_o)
df = data.frame(x,y)
df$group <- factor(x)
ggplot(df, aes(x = x, y = y, fill = group, color = group)) +
geom_point(size = 4) +
scale_color_manual(values = c("blue", "orange")) +
geom_errorbar(aes(ymax = c(sup_b, sup_o), ymin = c(inf_b, inf_o))) + labs(title = "Intervalle de confiance des moyennes de la taille de la carapace selon l'espèce")
t.test(RW~sp, crabs, alternative = "less")
wilcox.test(RW~sp, crabs, alternative = "less")
View(crabs)
data(CO2)
data(CO2)
d = CO2[CO2$Type=="Quebec", ]
d$conc_log = log10(d$conc)
d$conc_fact = as.factor(d$conc)
#>  [1] 95   175  250  350  500  675  1000 95   175  250  350  500  675  1000 95
#> [16] 175  250  350  500  675  1000 95   175  250  350  500  675  1000 95   175
#> [31] 250  350  500  675  1000 95   175  250  350  500  675  1000
#> Levels: 95 175 250 350 500 675 1000
m1 = lm(uptake~conc, d)
m2 = lm(uptake~conc_log, d)
# m3 = lm(uptake~...
layout(matrix(1:3, 1), respect=TRUE)
plot(d$conc, d$uptake, main=paste0("uptake~conc R^2=", signif(summary(m1)$r.squared, 2)*100, "%"))
abline(m1, col=2)
plot(d$conc_log, d$uptake, main=paste0("uptake~conc_log R^2=", signif(summary(m2)$r.squared, 2)*100, "%"))
abline(m2, col=2)
plot(d$conc_fact, d$uptake, main=paste0("uptake~conc_fact R^2=", "??", "%"))
View(CO2)
m3 = lm(uptake~conc, d)
summary(m3)
m3 = aov(uptake~conc, d)
summary(m3)
signif(summary(m3)$r.squared
}
summary(m3)$r.squared
m3$coefficients
m3$r.squared
m3 = ANOVA(uptake~conc, d)
m3 = ANOVA(lm(uptake~conc, d))
m3 = anova(lm(uptake~conc, d))
summary(m3)
summary(m3)$r.squared
View(m3)
View(m2)
m3 = aov(lm(uptake~conc, d))
summary(m3)$r.squared
View(m3)
View(m3)
View(m1)
m3 = lm(uptake~conc_fact, d)
summary(m3)$r.squared
plot(d$conc_fact, d$uptake, main=paste0("uptake~conc_fact R^2=", signif(summary(m3)$r.squared, 2)*100, "%"))
abline(m3, col=2)
plot(d$conc, d$uptake, main=paste0("uptake~conc R^2=", signif(summary(m1)$r.squared, 2)*100, "%"))
layout(matrix(1:1, 1), respect=TRUE)
plot(d$conc_fact, d$uptake, main=paste0("uptake~conc_fact R^2=", signif(summary(m3)$r.squared, 2)*100, "%"))
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method="bon")
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method="HW")
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method= "BH")
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method="bon")
##########
# Test de Tuckey :
m = aov(uptake~conc_fact,d)
plot(TukeyHSD(m, conf.level=0.95), las=2)
m
# Test de student groupe vs groupe 1 vs 1, avec correction :
pairwise.t.test(d$uptake, d$conc_fac, p.adjust.method="none") # sans ajustement
View(d)
View(m)
summary(m)
d = faraway::coagulation
d = faraway::coagulation
table(d$diet)
library(MASS)
data(crabs)
plot(crabs$RW)
myt.test <- function(x, y,alternative = "two.sided", paired = FALSE, var.equal = FALSE){
if(paired == TRUE){
method = "Student two sample t-test"
n = length(x)
df = n-1
Di=x-y
D = 1/n *sum(Di)
S2 = (1/(n-1)) * sum((Di-D)^2)
statistic = sqrt(n)*(D/sqrt(S2))
}
else{
method = "Welch two sample t-test"
n1 = length(x)
n2 = length(y)
statistic = (mean(x) - mean(y))/ sqrt(var(x)/n1 + var(y)/n2)
df = round((var(x)/n1 + var(y)/n2)^2 / ( ((var(x)^2)/((n1-1) * n1^2)) + ((var(y)^2)/((n2-1) * n2^2)) ))
}
if(shapiro.test(x)$p.value > 0.05 & shapiro.test(x)$p.value > 0.05){
if(alternative == "two.sided"){
p.value = 2*(1-pt(q = abs(statistic), df = df))
}
else if(alternative == "less"){
p.value = 1- pt(q = abs(statistic), df = df)
}
else{p.value = pt(q = abs(statistic), df = df)}
}
else{
if(alternative == "two.sided"){
p.value = 2*(1-pnorm(q = abs(statistic)))
}
else if(alternative == "less"){
p.value =  pnorm(q = abs(statistic))
}
else{p.value = 1-pnorm(q = abs(statistic))}
}
return(c(method, alternative, statistic, df, p.value))
}
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
x = rexp(20,2)
y = rexp(20,3)
myt.test(x,y, paired = FALSE, alternative = "two.sided")
t.test(x,y, paired = FALSE, alternative = "two.sided")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = FALSE, alternative = "less")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
x = rnorm(20,2,3)
y = rnorm(20,3,2)
myt.test(x,y, paired = TRUE, alternative = "less")
t.test(x,y, paired = TRUE, alternative = "less")
factor(d$diet)
d$diet_f = as.factor(d$diet)
View(d)
m = lm(coag~diet, d)
View(m)
m1 = lm(coag~diet_f, d)
View(m1)
#d$diet_f = as.factor(d$diet)
m = lm(coag~diet_f, d)
# test normalité des résidus :
shapiro.test(m$residuals)
summary(m)
#d$diet_f = as.factor(d$diet)
m = lm(coag~diet, d)
summary(m)
# test normalité des résidus :
shapiro.test(m$residuals) # p-value = 0.8629, normal
summary(m)
d = faraway::coagulation
# coag : mue + I_diet * Beta + erreurs
# H0 : égalité des moyennes / facteurs Beta
m = lm(coag~diet, d)
# test normalité des résidus :
shapiro.test(m$residuals) # p-value = 0.8629, normal
# p-value: 4.658e-05 < 0.05, on rejette H0
summary(m)
# Test de Tuckey : Voir les différences entre les groupes graphiquement
m1 = aov(coag~diet,d)
plot(TukeyHSD(m, conf.level=0.95), las=2)
plot(TukeyHSD(m1, conf.level=0.95), las=2)
summary(m) # effet global
summary(m1) # effet global
# homogénéité de la variance
bartlett.test(coag~diet, d)
# Test de student groupe vs groupe 1 vs 1, avec correction :
pairwise.t.test(d$coag, d$diet, p.adjust.method="none") # sans ajustement
pairwise.t.test(d$coag, d$diet, p.adjust.method="bon") # Bonferroni
pairwise.t.test(d$coag, d$diet, p.adjust.method= "BH") # Benjamini-Hochberg
# Ou bien non paramétrique car petits échantillons dans chaque groupe
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="none") # sans ajustement
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="bon") # Bonferroni
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method= "BH") # Benjamini-Hochberg
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="none", exact = FALSE) # sans ajustement
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method="bon", exact = FALSE) # Bonferroni
pairwise.wilcox.test(d$coag, d$diet, p.adjust.method= "BH", exact = FALSE) # Benjamini-Hochberg
# kruskal. Wallis
kruskal.test(coag~diet,d)
# EX 2 : poumons
d = ISwR::lung
# EX 2 : poumons
d = ISwR::lung
View(d)
table(d$method)
plot(volume~method+subject, d)
table(d$method+subject)
table(d$method+d$subject)
table(method+subject,d)
table(d$method, d$subject)
plot(volume~method+subject, d)
m = kruskal.test(volume~method+subject,d)
m =lm(volume~method+subject,d)
summary(m)
# HO : homogénéité de la variance
bartlett.test(coag~diet, d)
# HO : homogénéité de la variance
bartlett.test(volume~method+subject, d)
# HO : homogénéité de la variance
bartlett.test(m, d)
# test normalité des résidus : H0 : normalité des individus
shapiro.test(m$residuals)
# HO : homogénéité de la variance
bartlett.test(volume~method, d)
bartlett.test(volume~subject, d)
m1 = aov(volume~method+subject,d)
plot(TukeyHSD(m1, conf.level=0.95), las=2)
summary(m1) # effet global
setwd("D:/Master/S7/R-Julia/Projet/Package_R")
emission <-read.csv("CO2 Emissions_Canada.csv")
carburant <-function(carb){
if(carb == "X") return("Essence classique")
if(carb == "Z") return("Essence premium")
if(carb == "D") return("Diesel")
if(carb == "E") return("Ethanol")
else return("Gaz naturel")
}
for(i in 1:7385){
emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
emission$CO2_emissions<-as.double(emission$CO2_emissions)
hist(emission$CO2_emissions)
