---
title: "Rapport_projet"
author: "Gabriel Macé"
format: html
editor: visual
---

## Description du projet

Mon projet est un projet d'apprentissage supervisé, dont le but est de prédire le taux d'émission d'une voiture en fonction de ses caractéristiques.

Le choix d'un projet de machine learning vient du fait que les sciences des données sont un domaine qui m'intéresse particulièrement et dans lequel je n'avais que peu eu l'occasion de réaliser un projet assez poussé. 
De plus, j'avais déja repéré le jeu de données utilisé, il ne manquait plus que la bonne occasion pour l'exploiter.

J'ai décidé de le réaliser en deux parties : Une première avec R qui a pour but une analyse des données, et une deuxième avec Julia dont le but est de créer des modèles de classification.
J'ai choisi d'utiliser R et RStudio pour analyser les données car ce sont les outils que je trouve les plus pratiques pour ce genre de tâches. Ensuite j'ai décider d'utiliser Julia pour réaliser les modèles car c'est un langage que je ne connaissais pas, et que je souhaitais apprendre et comparer avec Python et R, pour cette partie j'ai utiliser VSCode et jupyter Notebook afin de simplifier et clarifier mon code.


## Description du jeu de données

Le jeu de données ["CO2 Emission by Vehicles"](https://www.kaggle.com/datasets/debajyotipodder/co2-emission-by-vehicles?select=CO2+Emissions_Canada.csv) est issus du site Kaggle, c'est une version compilé des données provenant du [site officiel](https://open.canada.ca/data/en/dataset/98f1a129-f628-4ce4-b24d-6f16bf24dd64#wb-auto-6) de données ouvertes du gouvernement Canadien. Il représente 7385 ainsi que leurs caractéristiques et leur taux d'émission de CO2.

J'ai choisi de travailler à partir de ce jeu de données tout d'abord car les émissions de gaz à effet de serre est un sujet qui m'intéresse. Puis, il contient des données diverses  : qualitatives, quantitatives discrètes et quantitatives continues, qui seront à traiter différemment, ce qui rend le travail plus intéressant.
Enfin, le jeu de données ne contient pas de valeurs manquantes, ce qui facilitera son traitement et permet une meilleure qualité des modèles.


## Partie R 
```{r}
emission <-read.csv("CO2 Emissions_Canada.csv")
```

Pour cette partie, j'ai tout d'abord créer un package R : "Package_R", mais en suite j'ai utilisé R en tant qu'utilisateur plutôt que programmeur, étant donné étant donné qu'il existe déja beaucoup de fonction permettant l'analyse statistique. J'ai seulement créé une fonction permettant de changé le nom des carburants afin de les rendre compréhensible s:
```{r}
carburant <-function(carb){
  if(carb == "X") return("Essence classique")
  if(carb == "Z") return("Essence premium")
  if(carb == "D") return("Diesel")
  if(carb == "E") return("Ethanol")
  else return("Gaz naturel")
}
for(i in 1:7385){
  emission$Fuel.Type[i] <- carburant(emission$Fuel.Type[i])
}
```
Puis j'ai créé une application Shiny afin de permettre une visualisation aisée des données, chose que je n'avais jamais fait au paravant.

### Analyse statistiques 

J'ai tout d'abord rendu les données exploitable en renommant les variables, en transformant les variables continues en double, les variables discrètes en integer, et en rendant factorielles les variables qualitatives.

#### Analyse univariée : 

 * Calcul des st
 * Plot et table pour comprendre la distribution des variables
```{r}
 names(emission)[names(emission)=="CO2.Emissions.g.km."]<-"CO2_emissions"
 emission$CO2_emissions<-as.double(emission$CO2_emissions)
 hist(emission$CO2_emissions)
```
 * Test loi : Info sur la normalité malheuresement pas de tests de shapiro.wilk car échantillon trop grand.

#### Analyse mulitvariée : 
 * Plot 
 * Calcul de corrélation 
 * Test anova
 
Par exemple, consommation mixte et émission de CO2 très corrélés, plus groupe conso émission : éthanol vs le reste

### Application Shiny

## Partie Julia

### Machine learning

Les packages utilisés Les modèles utilisés Les fonctions de prédiction marche avec des nulls pour certaines variables tsais
Train vs test
pas naives Bayes

Pas de one hot encoding -> créé trop de variables pour pas assez de bénéfices
Pour tout sauf arbre de prédiction car régression : Emission de CO2-> intervalles
KNN:
Que données numériques : garde que Engine	Cylinders	City	Hwy	Comb  centrés et réduits+ le type de carburant sous formes de 1=ethanol ou 0 =autres
Accuracy=0.8744920993227991

erreur=0.1255079006772009

SVM : 
pareil knn
misclassification_rate(ypred, y[test])
sans train test : 0.17562626946513202
avec train test : 0.2383747178329571
Avec onehotencoding et standardisation : 0.2383747178329571
juste quanti normalisé et gpe éthanol / pas éthanol : 0.21760722347629796

Arbre classif : Pas de centrér / réduire car pas besoin -> calcul de discrimination par vairable ne dépend pas de l'échelle des données
println(accuracy(ypred, ycut[test]))
correct_classes = count(ycut[test] .== ypred)
sans séparateur ethanol/ autres : 0.8474040632054176 1877
avec : 0.8478555304740406 1878 -> pas besoin de le mettre

feature_importances(dc_mach)
 :Comb => 0.6884300907914488
          :mpg => 0.13632411706780562
         :Fuel => 0.06304304492675829
        :Model => 0.024815616034138187
          :Hwy => 0.020684547820196953
         :City => 0.018899549252805934
 :Transmission => 0.015229398070205001
         :Make => 0.012218636352082814
        :Class => 0.009817851434885375
       :Engine => 0.009157560861057703
    :Cylinders => 0.0013795873886153665
    

arbre prediction : 
Avec séparateur ethanol / autres :
distance moyenne : 2.3221264890113633
distance max 82.375 i = 38
distance min 0.0 i = 10
0.8126410835214447
4.64
Mieux avec 

features importances :
12-element Vector{Pair{Symbol, Float64}}:
         :Comb => 0.9468955190288346
           :x1 => 0.04072398439516061
         :Fuel => 0.008915364610652754
          :mpg => 0.002059993780793983
         :Make => 0.0002781544095387943
         :City => 0.0002618791574918742
          :Hwy => 0.0002515058094895561
       :Engine => 0.0002043988304768994
        :Model => 0.0001975699501606361
 :Transmission => 0.00011767092304548185
        :Class => 6.361214981587146e-5
    :Cylinders => 3.0346954538855293e-5
### Création de package avec github

Interface_julia.jl ne dépend que de fonctions.jl qui ne dépend d'aucun autre fichier car j'ai exporté les modèles finis et optimisés.

### Interface avec Dash.jl

Au début je voulais faire en sorte que le véhicule prédit se voit dans le graphique mais je n'ai pas réussi à faire apparaitre le point.

## Problèmes rencontrés :

Importation de package bugger souvent, j'ai du supprimer Julia, défragmenter mon disque dur, tout réinstaller.
Plusieurs fois.
Super.
Top.
Belle expérience.

## CCL :

### Points forts

### Points faibles

### Limites: Jeu de données du Canada difficilement exploitable avec des données française par exemple
